<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  
  <channel>
    <title>Anshuman Singh's Blog</title>
    <description>Hi, I am Anshuman Singh, a Full Stack Developer
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/rss.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 13 Mar 2019 23:15:14 +0530</pubDate>
    <lastBuildDate>Wed, 13 Mar 2019 23:15:14 +0530</lastBuildDate>
    
    <item>
      <title>Spring Cloud Config - File Based Repository</title>
      <description><![CDATA[ <p>Handling configurations for applications in a microservice based architecture can turn into a maintenance nightmare. Spring Cloud Config provides a viable solution for this problem by externalising application configurations. This post talks about how to setup Spring Config Server with file based config repository and how to make your services act as clients to the config server.</p>

<p>To demonstrate the Spring Cloud Config server setup and usage we’ll be creating an application titled Narrator. This is an eCommerce application that can be used to buy Audio Books. This application has microservice based architecture with 2 different components (sub-applications) deployed separately.</p>

<ul>
  <li>User</li>
  <li>Order</li>
</ul>

<p><img src="/images/2019-03-09-spring-cloud-config-file-repo/architecture_block_diagram.png" alt="Architecture Block Diagram" class="fit image" /></p>

<p>Let’s start by creating the Spring Cloud Config Server.</p>

<h2>Narrator's Spring Cloud Config Server</h2>

<p>Create a blank maven project in your IDE of choice. For this project I’ll be using Idea intelliJ IDE. Once the project is fully setup the folder structure is going to look like this.</p>

<p><img src="/images/2019-03-09-spring-cloud-config-file-repo/narrator_config_server_folder_structure.png" alt="Config Server Folder Structure" class="fit image" /></p>

<p>Lets start by modifying pom.xml of the project and add following items.</p>

<ol>
  <li>Make this a Springboot Application by adding the parent tag. At the time of writing this blog post the latest stable version of Springboot is <em>2.1.3.RELEASE</em>.</li>
  <li>Add the dependency management tag for getting bill of material for config server.</li>
  <li>Add dependency for Spring Cloud Config Starter and the Spring Cloud Config Server.</li>
</ol>

<h3>pom.xml</h3>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;groupId&gt;</span>com.anshuman<span class="nt">&lt;/groupId&gt;</span>
<span class="nt">&lt;artifactId&gt;</span>narrator-spring-config-file-repo<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>

<span class="nt">&lt;parent&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.1.3.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/parent&gt;</span>

<span class="nt">&lt;dependencyManagement&gt;</span>
    <span class="nt">&lt;dependencies&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>Greenwich.RELEASE<span class="nt">&lt;/version&gt;</span>
            <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
            <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/dependencyManagement&gt;</span>

<span class="nt">&lt;dependencies&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-config<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>2.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>

    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-cloud-config-server<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>2.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span></code></pre></figure>

<p>After adding all these dependencies in pom.xml maven is going to fetch all the required jars for you and add them to application’s classpath. The next step now is to create the starter class which will be run to start Spring Cloud Config server.</p>

<p>Lets call this class <em>NarratorConfigServerStarter.java</em>. In this class we specify that the application is a Springboot application by adding the annotation <em>@SpringBootApplication</em>. To make this Springboot application a Spring Cloud Config Server add the annotation <em>@EnableConfigServer</em>.</p>

<h3>NarratorConfigServerStarter.java</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@SpringBootApplication</span>
<span class="nd">@EnableConfigServer</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NarratorConfigServerStarter</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">NarratorConfigServerStarter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<p>Add a property file named <em>application.properties</em> containing configurations for the config server. This property file will be considered by Springboot when the application is started. We are going to add 3 configurations to this property file.</p>

<ol>
  <li>Port on which the config server is going to listen for configuration requests.</li>
  <li>Profile which indicates the type of configuration repository that will be used by the config server. We’ll provide <em>native</em> value to this configuration as we are going to use file based configuration repository for this post.</li>
  <li>Path of the directories where configuration files are stored for client applications.</li>
</ol>

<h3>application.properties</h3>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="py">server.port</span><span class="p">=</span><span class="s">8181</span>
<span class="py">spring.profiles.active</span><span class="p">=</span><span class="s">native</span>
<span class="py">spring.cloud.config.server.native.search-locations</span><span class="p">=</span><span class="s">file:///Users/anshumansingh/Anshuman's_Stuff/Interview_Preparation/GIT_Downloads/narrator-config-file-repo/narrator-spring-config-file-repo/config-repo/user,file:///Users/anshumansingh/Anshuman's_Stuff/Interview_Preparation/GIT_Downloads/narrator-config-file-repo/narrator-spring-config-file-repo/config-repo/order</span></code></pre></figure>

<p>The next step now is to add the configuration repositories from which the spring cloud is going to serve configurations to the client applications.</p>

<p>Start by adding directories named <em>order</em> and <em>user</em> in the local system. Next add the files mentioned below containing properties in order and user directories. For this post we’re going to have <em>country</em> property for order application and <em>privacy.enabled</em> property for user application.</p>

<h3>order.properties</h3>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="py">country</span><span class="p">=</span><span class="s">IN</span></code></pre></figure>

<p>Different property files for different environments can be added to the config repository. Here we are going to add another property file for order application for the <em>qa</em> environment. Notice naming convention of the property file.</p>

<h3>order-qa.properties</h3>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="py">country</span><span class="p">=</span><span class="s">US</span></code></pre></figure>

<p>Similarly add property files for user application for different environments for the user application.</p>

<h3>user.properties</h3>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="py">privacy.enabled</span><span class="p">=</span><span class="s">y</span></code></pre></figure>

<h3>user-qa.properties</h3>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="py">privacy.enabled</span><span class="p">=</span><span class="s">n</span></code></pre></figure>

<h3>user-uat.properties</h3>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="py">privacy.enabled</span><span class="p">=</span><span class="s">y</span></code></pre></figure>

<p>Spring Cloud Config server setup is complete. Run the <em>NarratorConfigServerStarter</em> class to start the config server.</p>

<p>To check if config server is up and is serving the configuration for client applications you can fire http requests using any REST api client like postman.</p>

<h2>Http Response for User Configuration for the <i>default</i> profile</h2>
<p><img src="/images/2019-03-09-spring-cloud-config-file-repo/postman_default_user.png" class="fit image" alt="Order Client Folder Structure" /></p>

<h2>Http Response for User Configuration for the <i>qa</i> profile</h2>
<p><img src="/images/2019-03-09-spring-cloud-config-file-repo/postman_qa_user.png" class="fit image" alt="Order Client Folder Structure" /></p>

<p>Default profile configurations will be overwritten by the profile specific configuration when config is requested by client application. As you can see when you make a REST request directly to the config server you get configurations for both default and specified profile.</p>

<p>Config server for Narrator application is ready to accept requests from client applications.</p>

<p>Now lets create couple of client applications for the config server. These applications are going to send requests to the config Server for configurations.</p>

<h2>Spring Cloud Config Client - User</h2>

<p>We’ll create the user application which will act as a client for the config server. This is a REST based application with 2 layers - REST Controller layer and Service layer. For simplicity we are not going to create the repository layer which usually talks to the database.</p>

<p>Once done the folder structure is going to look like this.</p>

<p><img src="/images/2019-03-09-spring-cloud-config-file-repo/narrator_user_client_folder_structure.png" alt="User Client Folder Structure" class="fit image" /></p>

<p>Create a new maven application and modify the pom.xml to make this application a Springboot application. Next, add the dependencies for Spring Web Starter and Spring Cloud Config Client packages.</p>

<h3>pom.xml</h3>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;groupId&gt;</span>com.anshuman<span class="nt">&lt;/groupId&gt;</span>
<span class="nt">&lt;artifactId&gt;</span>narrator-user-api-config-file-repo<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>

<span class="nt">&lt;parent&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.1.3.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/parent&gt;</span>

<span class="nt">&lt;dependencies&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>

    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-cloud-config-client<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>2.1.0.RELEASE<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span></code></pre></figure>

<h3>UserManagementStarter.java</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Add</span> <span class="n">a</span> <span class="n">starter</span> <span class="kd">class</span> <span class="nc">for</span> <span class="n">the</span> <span class="n">application</span> <span class="n">with</span> <span class="n">the</span> <span class="n">_public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">)</span><span class="n">_</span> <span class="n">method</span> <span class="n">which</span> <span class="n">would</span> <span class="n">be</span> <span class="n">run</span> <span class="n">to</span> <span class="n">start</span> <span class="n">the</span> <span class="n">application</span><span class="o">.</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserManagementStarter</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">UserManagementStarter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Add User pojo to the project. This class is going to carry the information for User entity.</p>

<h3>User.java</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@JsonInclude</span><span class="o">(</span><span class="n">JsonInclude</span><span class="o">.</span><span class="na">Include</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">userId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">zipCode</span><span class="o">;</span>

    <span class="c1">//  Getters and Setters</span>
<span class="o">}</span></code></pre></figure>

<p>Now lets add the REST controller to the application where we are going to define the REST mappings for User REST service.</p>

<h3>UserController.java</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/user-mgmt/v1"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">UserService</span> <span class="nf">getUserService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserService</span><span class="o">(</span><span class="n">UserService</span> <span class="n">userService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">userService</span> <span class="o">=</span> <span class="n">userService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">userService</span><span class="o">.</span><span class="na">getAllUsers</span><span class="o">(),</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<p>Now add <em>UserService.java</em> class containing business logic for the user application. In this class we’re going to populate the value of <em>privacyEnabled</em> field from configuration passed by config server.</p>

<h3>UserService.java</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>

    <span class="c1">//  Getting the value for this field from configuration sent by config server</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${privacy.enabled}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">privacyEnabled</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPrivacyEnabled</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">privacyEnabled</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPrivacyEnabled</span><span class="o">(</span><span class="n">String</span> <span class="n">privacyEnabled</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">privacyEnabled</span> <span class="o">=</span> <span class="n">privacyEnabled</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="n">User</span> <span class="n">u1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
        <span class="n">u1</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">u1</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">"Mr."</span><span class="o">);</span>
        <span class="n">u1</span><span class="o">.</span><span class="na">setFirstName</span><span class="o">(</span><span class="s">"Anshuman"</span><span class="o">);</span>
        <span class="n">u1</span><span class="o">.</span><span class="na">setLastName</span><span class="o">(</span><span class="s">"Singh"</span><span class="o">);</span>
        <span class="n">u1</span><span class="o">.</span><span class="na">setZipCode</span><span class="o">(</span><span class="s">"y"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">privacyEnabled</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="s">"123456"</span><span class="o">);</span>

        <span class="n">User</span> <span class="n">u2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
        <span class="n">u2</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">u2</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">"Mr."</span><span class="o">);</span>
        <span class="n">u2</span><span class="o">.</span><span class="na">setFirstName</span><span class="o">(</span><span class="s">"Arora"</span><span class="o">);</span>
        <span class="n">u2</span><span class="o">.</span><span class="na">setLastName</span><span class="o">(</span><span class="s">"Anuj"</span><span class="o">);</span>
        <span class="n">u2</span><span class="o">.</span><span class="na">setZipCode</span><span class="o">(</span><span class="s">"y"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">privacyEnabled</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="s">"313131"</span><span class="o">);</span>

        <span class="n">User</span> <span class="n">u3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
        <span class="n">u3</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">u3</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">"Mrs."</span><span class="o">);</span>
        <span class="n">u3</span><span class="o">.</span><span class="na">setFirstName</span><span class="o">(</span><span class="s">"Neha"</span><span class="o">);</span>
        <span class="n">u3</span><span class="o">.</span><span class="na">setLastName</span><span class="o">(</span><span class="s">"Upadhyay"</span><span class="o">);</span>
        <span class="n">u3</span><span class="o">.</span><span class="na">setZipCode</span><span class="o">(</span><span class="s">"y"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">privacyEnabled</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="s">"302033"</span><span class="o">);</span>

        <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u1</span><span class="o">);</span>
        <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u2</span><span class="o">);</span>
        <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u3</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">users</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Add the property file containing information about the port on which the user application server is listen for requests.</p>

<h3>application.properties</h3>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="py">server.port</span><span class="p">=</span><span class="s">8182</span></code></pre></figure>

<p>Now comes the step where you’ll specify the details of config server. Add a file <em>bootstrap.properties</em> which will contain URI of config server and name of the application. This name will be used by the config server to identify configuration set for the application. Also, in this file you specify the environment for which the configuration is to be fetched from the config server.</p>

<p>Configuration present in the <em>bootstrap.properties</em> file is loaded before any other configuration.</p>

<h3>bootstrap.properties</h3>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="py">spring.profiles.active</span><span class="p">=</span><span class="s">qa</span>
<span class="py">spring.application.name</span><span class="p">=</span><span class="s">user</span>
<span class="py">spring.cloud.config.uri</span><span class="p">=</span><span class="s">http://localhost:8181</span></code></pre></figure>

<p>Similar to the User service we’re going to create order application which is going to ask for configuration from the config server.</p>

<h2>Spring Cloud Config Server - Order</h2>

<p>Once done the folder structure is going to look like this.</p>

<p><img src="/images/2019-03-09-spring-cloud-config-file-repo/narrator_order_client_folder_structure.png" alt="Order Client Folder Structure" class="fit image" /></p>

<h3>pom.xml</h3>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;groupId&gt;</span>com.anshuman<span class="nt">&lt;/groupId&gt;</span>
<span class="nt">&lt;artifactId&gt;</span>narrator-order-api-config-file-repo<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>

<span class="nt">&lt;parent&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.1.3.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/parent&gt;</span>

<span class="nt">&lt;dependencies&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>

    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-cloud-config-client<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>2.1.0.RELEASE<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span></code></pre></figure>

<h3>OrderManagementStarter.java</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderManagementStarter</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">OrderManagementStarter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h3>Order.java</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">orderId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Date</span> <span class="n">date</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">value</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">userId</span><span class="o">;</span>

    <span class="c1">//  Getters and Setters</span>
<span class="o">}</span></code></pre></figure>

<h3>OrderController.java</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/order-mgmt/v1"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">OrderService</span> <span class="n">orderService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">OrderService</span> <span class="nf">getOrderService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">orderService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOrderService</span><span class="o">(</span><span class="n">OrderService</span> <span class="n">orderService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">orderService</span> <span class="o">=</span> <span class="n">orderService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"orders"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Order</span><span class="o">&gt;&gt;</span> <span class="nf">getAllOrdersForUser</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"userId"</span><span class="o">)</span> <span class="n">Integer</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">orderService</span><span class="o">.</span><span class="na">getAllOrdersForUser</span><span class="o">(</span><span class="n">userId</span><span class="o">),</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h3>OrderService.java</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderService</span> <span class="o">{</span>

    <span class="c1">// Getting the value of this field from configuration sent by config server</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${country}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">country</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCountry</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">country</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCountry</span><span class="o">(</span><span class="n">String</span> <span class="n">country</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">country</span> <span class="o">=</span> <span class="n">country</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Order</span><span class="o">&gt;</span> <span class="nf">getAllOrdersForUser</span><span class="o">(</span><span class="n">Integer</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Order</span><span class="o">&gt;</span> <span class="n">orders</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">String</span> <span class="n">currency</span> <span class="o">=</span> <span class="s">"IN"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">country</span><span class="o">)</span> <span class="o">?</span> <span class="s">"INR"</span> <span class="o">:</span> <span class="s">"$"</span><span class="o">;</span>

        <span class="n">Order</span> <span class="n">o1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Order</span><span class="o">();</span>
        <span class="n">o1</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">o1</span><span class="o">.</span><span class="na">setDate</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
        <span class="n">o1</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="n">currency</span><span class="o">+</span><span class="s">"100"</span><span class="o">);</span>
        <span class="n">o1</span><span class="o">.</span><span class="na">setOrderId</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>

        <span class="n">Order</span> <span class="n">o2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Order</span><span class="o">();</span>
        <span class="n">o2</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">o2</span><span class="o">.</span><span class="na">setDate</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
        <span class="n">o2</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="n">currency</span><span class="o">+</span><span class="s">"200"</span><span class="o">);</span>
        <span class="n">o2</span><span class="o">.</span><span class="na">setOrderId</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>

        <span class="n">Order</span> <span class="n">o3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Order</span><span class="o">();</span>
        <span class="n">o3</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">o3</span><span class="o">.</span><span class="na">setDate</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
        <span class="n">o3</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="n">currency</span><span class="o">+</span><span class="s">"150"</span><span class="o">);</span>
        <span class="n">o3</span><span class="o">.</span><span class="na">setOrderId</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>

        <span class="n">orders</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">o1</span><span class="o">);</span>
        <span class="n">orders</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">o2</span><span class="o">);</span>
        <span class="n">orders</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">o3</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">orders</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">o</span><span class="o">-&gt;</span><span class="n">o</span><span class="o">.</span><span class="na">getUserId</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">userId</span><span class="o">)).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<h3>application.properties</h3>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="py">server.port</span><span class="p">=</span><span class="s">8183</span></code></pre></figure>

<h3>bootstrap.properties</h3>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="py">spring.profiles.active</span><span class="p">=</span><span class="s">qa</span>
<span class="py">spring.application.name</span><span class="p">=</span><span class="s">order</span>
<span class="py">spring.cloud.config.uri</span><span class="p">=</span><span class="s">http://localhost:8181</span></code></pre></figure>

<p>Now that both the clients are setup run the starter classes for both the applications. When the applications start you’ll notice a log entry indicating the config server to which the request for configuration is sent by client applications.</p>

<p>Complete and working code for these applications can be downloaded from <a href="https://github.com/singh-anshuman/narrator-config-file-repo" target="blank">github</a>.</p>
 
<br />
<hr />
<p>You’ve just read <strong>"<a href="http://localhost:4000/spring-cloud/2019/03/09/spring-cloud-config-file-repo.html">Spring Cloud Config - File Based Repository</a>"</strong> on <strong>"<a href="http://localhost:4000/">Anshuman Singh's Blog</a>"</strong>.</p>
 ]]></description>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0530</pubDate>
      <link>http://localhost:4000/spring-cloud/2019/03/09/spring-cloud-config-file-repo.html</link>
      <guid isPermaLink="true">http://localhost:4000/spring-cloud/2019/03/09/spring-cloud-config-file-repo.html</guid>
      
      <category>Spring-Cloud</category>
      
    </item>
    
  </channel>
</rss>
